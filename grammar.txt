/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

/*
 * DCPU16 ASM Parser
 */

{
  var line = 1;
}

start
  = program:statements
    {
      return program;
    }


statements
  = stmt:stmt nl* statements:statements
    { return [stmt].concat(statements); }

  / stmt:stmt nl*
    { return [stmt]; }

  / nl*
    { return []; }


stmt
  = ws ":" label:label ws cmd:cmd ws
    {
      return {
        line: line,
        label: label,
        cmd: cmd,
        action: "op"
      };
    }

  / ws ":" label:label ws
    {
      return {
        line: line,
        label: label,
        action: "op"
      };
    }

  / ws "#macro"? ws name:label ws "(" ws params:paramlist ws ")" ws nl? "{" ws nl? code:statements ws "}" ws
    {
      return {
        name: name,
        params: params,
        src: code,
        action: "macro"
      };
    }

  / ws name:label ws "(" ws params:paramlist ws ")"
    {
      return {
        line: line,
        name: name,
        params: params,
        action: "macrocall"
      };
    }

  / ws cmd:cmd ws
    {
      return {
        line: line,
        cmd: cmd,
        action: "op"
      };
    }


label "label"
  = label:([a-zA-Z0-9_\.]+)
    {
      return label.join('');
    }


cmd
  = ws op:op ws plist:paramlist
    {
      return {
        op: op,
        params: plist
      };
    }

op "operator"
  = op:([a-zA-Z][a-zA-Z][a-zA-Z]) { return op.join('').toUpperCase(); }

paramlist
  = v:param ws "," ws l:paramlist
    {
      return [v].concat(l);
    }
  / v:param
    {
      return [v];
    }

param "parameter"
  = "[" v:additive "]"
    {
      v.hasBrackets = true;
      return v;
    }
  / v:value
    {
      return v;
    }

additive
  = left:value "+" right:additive
    {
      return {
        action: "add",
        children: [left, right]
      };
    }
  / v:value
    {
      return v;
    }

value
  = v:number
    {
      return {
        value: v,
        isNumber: true
      };
    }
  / v:label
    {
      return {
        value: v,
        isString: true
      };
    }

number "number"
  /* oct */
  = v:("0"[0-9]+)
    { return parseInt(v[0] + v[1].join(''), 8); }
  /* hex */
  / v:("0x"[0-9a-fA-F]+)
    { return parseInt(v[0] + v[1].join(''), 16); }
  /* dec */
  / v:[0-9]+
    { return parseInt(v.join(''), 10); }


ws "whitespace"
  = [" ""\t"]*


nl "newline"
  = "\n" { line++; }
  / "\r\n" { line++; }
  / "\r" { line++; }
