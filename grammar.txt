/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

/*
 * DCPU16 ASM Parser
 */

{
  var line = 1;
  var tmp;
}

start
  = program:statements
    {
      return program;
    }


statements
  = nl* stmt:stmt statements:statements
    { return [stmt].concat(statements); }

  / stmt:stmt
    { return [stmt]; }

  / nl*
    { return []; }


stmt
  = ws "#macro"? ws name:label ws "(" ws params:paramlist ws ")" ws nl? "{" ws nl? code:statements ws "}" ws
    {
      return {
        name: name,
        params: params,
        src: code,
        action: "macro"
      };
    }

  / ws name:label ws "(" ws params:paramlist ws ")"
    {
      return {
        line: line,
        name: name,
        params: params,
        action: "macrocall"
      };
    }

  / ws label:labeldef? ws cmd:cmd ws
    {
      tmp = {
        line: line,
        cmd: cmd,
        action: "op"
      };
      if (label.length > 0) {
        tmp.label = label;
      }
      return tmp;
    }

  / ws label:labeldef ws
    {
      return {
        line: line,
        label: label,
        action: "op"
      };
    }

  / comment
    {
      return {
        action: "nop"
      };
    }


cmd
  = ws op:op ws plist:paramlist
    {
      return {
        op: op,
        params: plist
      };
    }

op "operator"
  = op:([a-zA-Z][a-zA-Z][a-zA-Z]) { return op.join('').toUpperCase(); }

paramlist
  = label:labeldef? ws v:param ws "," ws l:paramlist
    {
      if (label.length > 0) {
        v.label = label;
      }
      return [v].concat(l);
    }
  / label:labeldef? ws v:param
    {
      if (label.length > 0) {
        v.label = label;
      }
      return [v];
    }

param "parameter"
  = "[" v:additive "]"
    {
      v.hasBrackets = true;
      return v;
    }
  / v:value
    {
      return v;
    }

additive
  = left:value "+" right:additive
    {
      return {
        isExpression: true,
        children: [left, right]
      };
    }
  / v:value
    {
      return v;
    }

value
  = v:number
    {
      return {
        value: v,
        isNumber: true
      };
    }
  / v:label
    {
      return {
        value: v,
        isString: true
      };
    }
  / "\"" v:strliteral "\""
    {
      return {
        value: v,
        isStringLiteral: true
      };
    }


number "number"
  /* oct */
  = v:("0"[0-9]+)
    { return parseInt(v[0] + v[1].join(''), 8); }
  /* hex */
  / v:("0x"[0-9a-fA-F]+)
    { return parseInt(v[0] + v[1].join(''), 16); }
  /* dec */
  / v:[0-9]+
    { return parseInt(v.join(''), 10); }

strliteral "stringliteral"
  = v:allbutquotes*
    { return v.join(''); }

labeldef
  = ":" l:label
    { return l; }

label "label"
  = label:([a-zA-Z0-9_\.]+)
    {
      return label.join('');
    }

allbutquotes
  = v:"\\\""
    { return "\""; }
  / v:[^\"]
    { return v; }

comment
  = ";" [^\n\r]*

ws "whitespace"
  = " "*

nl "newline"
  = "\n" ws { line++; }
  / "\r\n" ws { line++; }
  / "\r" ws { line++; }

