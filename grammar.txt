

/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */

/*
 * DCPU16 ASM Parser
 */

{
  var line = 1;
  var tmp;
  var i;

  var isArray = function (val) {
    return typeof val === "object" && 'splice' in val && 'join' in val;
  };

  var node = function (type, value, children) {
    var node = {
          type: type,
          value: value,
          line: line,
          children: []
        }, i;

    for (i = 2; i < arguments.length; i++) {
      node.children.push(arguments[i]);
    }

    return node;
  };
}

start
  = program:statements
    {
      return program;
    }


statements
  = nl* stmt:stmt statements:statements
    { return isArray(stmt) ? stmt.concat(statements) : [stmt].concat(statements); }

  / stmt:stmt
    { return isArray(stmt) ? stmt : [stmt]; }

  / nl*
    { return []; }


stmt
  = ws ("." / "#") "macro"? ws name:label ws "(" ws params:paramlist ws ")" ws nl? "{" ws nl? code:statements ws "}" ws
    { return node("node_directive", "macro", node.apply(this, ["node_value", "val_paramlist"].concat(params)), code);
    }

  / ws d:directive ws params:wsparamlist ws
    { return node("node_directive", d, node.apply(this, ["node_value", "val_paramlist"].concat(params))); }

  / ws label:labeldef? ws cmd:cmd ws
    {
      tmp = cmd;

      if (label.length > 0) {
        tmp = [node("node_label", label), tmp];
      }

      return tmp;
    }

  / ws label:labeldef ws
    { return node("node_label", label); }

  / ws comment
    { return node("node_nop", "nop"); }


cmd
  = ws op:op ws plist:paramlist
    { return node("node_op", op, node.apply(this, ["node_value", "val_paramlist"].concat(plist))); }

paramlist
  = /* no value labels for now label:labeldef?*/ ws v:param ws "," ws l:paramlist
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v].concat(l);
    }
  / /* no value labels for now label:labeldef?*/ ws v:param
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v];
    }

wsparamlist
  = /* no value labels for now label:labeldef?*/ ws v:param ws ","? ws l:paramlist
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v].concat(l);
    }
  / /* no value labels for now label:labeldef?*/ ws v:param
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v];
    }

param "parameter"
  = "[" ws m:"--"? ws "SP" ws p:"++"? ws "]"
    {
      tmp = "PEEK";
      if (m === '--' && p === '') {
        tmp = "PUSH";
      } else if (m === '' && p === '++') {
        tmp = "POP";
      }

      return node("node_value", "val_deref", node("val_identifier", tmp));
    }
  / "[" v:additive "]"
    { return node("node_value", "val_deref", v); }
  / v:additive
    {
      return node("node_value", "val_literal", v);
    }

additive
  = left:multiplicative ws right:(("+" / "-") ws multiplicative ws)*
    {
      if (right.length === 0) {
        return left;
      }

      tmp = right[right.length - 1][2];

      for (i = right.length - 2; i >= 0; i--) {
        tmp = node("node_expression", right[i + 1][0], right[i][2], tmp);
      }

      return node("node_expression", right[0][0], left, tmp);
    }

multiplicative
  = left:value ws right:(("*" / "/") ws value ws)*
    {
      if (right.length === 0) {
        return left;
      }

      tmp = right[right.length - 1];

      for (i = right.length - 2; i >= 0; i--) {
        tmp = node("node_expression", right[i + 1][0], right[i][2], tmp);
      }

      return node("node_expression", right[0][0], left, tmp);
    }

value
  = v:number
    { return node("val_number", v); }
  / v:label
    { return node("val_identifier", v); }
  / "\"" v:strliteral "\""
    { return node("val_string", v); }
  / "(" ws v:additive ws ")"
    { return v; }


number "number"
  /* oct */
  = v:("0"[0-9]+)
    { return parseInt(v[0] + v[1].join(''), 8); }
  /* hex */
  / v:("0x"[0-9a-fA-F]+)
    { return parseInt(v[0] + v[1].join(''), 16); }
  /* dec */
  / v:[0-9]+
    { return parseInt(v.join(''), 10); }

strliteral "stringliteral"
  = v:allbutquotes*
    { return v.join(''); }

labeldef
  = ":" l:label
    { return l; }
  / l:label ":"
    { return l; }

label "label"
  = label:([a-zA-Z0-9_\.]+)
    { return label.join(''); }

op "operator"
  = op:([a-zA-Z][a-zA-Z][a-zA-Z])
    { return op.join('').toUpperCase(); }

directive "directive"
  = ("." / "#") l:label
    { return l; }

allbutquotes
  = v:"\\\""
    { return "\""; }
  / v:[^\"]
    { return v; }

comment
  = ";" [^\n\r]*

ws "whitespace"
  = " "*

nl "newline"
  = "\n" ws { line++; }
  / "\r\n" ws { line++; }
  / "\r" ws { line++; }

