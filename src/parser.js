// this file is autogenerated.

DCPU16.Parser = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "additive": parse_additive,
        "allbutquotes": parse_allbutquotes,
        "cmd": parse_cmd,
        "comment": parse_comment,
        "label": parse_label,
        "labeldef": parse_labeldef,
        "multiplicative": parse_multiplicative,
        "nl": parse_nl,
        "number": parse_number,
        "op": parse_op,
        "param": parse_param,
        "paramlist": parse_paramlist,
        "start": parse_start,
        "statements": parse_statements,
        "stmt": parse_stmt,
        "strliteral": parse_strliteral,
        "value": parse_value,
        "ws": parse_ws
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_statements();
        var result2 = result1 !== null
          ? (function(program) {
                return program;
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statements() {
        var cacheKey = 'statements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result11 = [];
        var result14 = parse_nl();
        while (result14 !== null) {
          result11.push(result14);
          var result14 = parse_nl();
        }
        if (result11 !== null) {
          var result12 = parse_stmt();
          if (result12 !== null) {
            var result13 = parse_statements();
            if (result13 !== null) {
              var result9 = [result11, result12, result13];
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(stmt, statements) { return [stmt].concat(statements); })(result9[1], result9[2])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos1 = pos;
          var result6 = parse_stmt();
          var result7 = result6 !== null
            ? (function(stmt) { return [stmt]; })(result6)
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var savedPos0 = pos;
            var result2 = [];
            var result4 = parse_nl();
            while (result4 !== null) {
              result2.push(result4);
              var result4 = parse_nl();
            }
            var result3 = result2 !== null
              ? (function() { return []; })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stmt() {
        var cacheKey = 'stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        var savedPos8 = pos;
        var result33 = parse_ws();
        if (result33 !== null) {
          if (input.substr(pos, 6) === "#macro") {
            var result54 = "#macro";
            pos += 6;
          } else {
            var result54 = null;
            if (reportMatchFailures) {
              matchFailed("\"#macro\"");
            }
          }
          var result34 = result54 !== null ? result54 : '';
          if (result34 !== null) {
            var result35 = parse_ws();
            if (result35 !== null) {
              var result36 = parse_label();
              if (result36 !== null) {
                var result37 = parse_ws();
                if (result37 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result38 = "(";
                    pos += 1;
                  } else {
                    var result38 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result38 !== null) {
                    var result39 = parse_ws();
                    if (result39 !== null) {
                      var result40 = parse_paramlist();
                      if (result40 !== null) {
                        var result41 = parse_ws();
                        if (result41 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result42 = ")";
                            pos += 1;
                          } else {
                            var result42 = null;
                            if (reportMatchFailures) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result42 !== null) {
                            var result43 = parse_ws();
                            if (result43 !== null) {
                              var result53 = parse_nl();
                              var result44 = result53 !== null ? result53 : '';
                              if (result44 !== null) {
                                if (input.substr(pos, 1) === "{") {
                                  var result45 = "{";
                                  pos += 1;
                                } else {
                                  var result45 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (result45 !== null) {
                                  var result46 = parse_ws();
                                  if (result46 !== null) {
                                    var result52 = parse_nl();
                                    var result47 = result52 !== null ? result52 : '';
                                    if (result47 !== null) {
                                      var result48 = parse_statements();
                                      if (result48 !== null) {
                                        var result49 = parse_ws();
                                        if (result49 !== null) {
                                          if (input.substr(pos, 1) === "}") {
                                            var result50 = "}";
                                            pos += 1;
                                          } else {
                                            var result50 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"}\"");
                                            }
                                          }
                                          if (result50 !== null) {
                                            var result51 = parse_ws();
                                            if (result51 !== null) {
                                              var result31 = [result33, result34, result35, result36, result37, result38, result39, result40, result41, result42, result43, result44, result45, result46, result47, result48, result49, result50, result51];
                                            } else {
                                              var result31 = null;
                                              pos = savedPos8;
                                            }
                                          } else {
                                            var result31 = null;
                                            pos = savedPos8;
                                          }
                                        } else {
                                          var result31 = null;
                                          pos = savedPos8;
                                        }
                                      } else {
                                        var result31 = null;
                                        pos = savedPos8;
                                      }
                                    } else {
                                      var result31 = null;
                                      pos = savedPos8;
                                    }
                                  } else {
                                    var result31 = null;
                                    pos = savedPos8;
                                  }
                                } else {
                                  var result31 = null;
                                  pos = savedPos8;
                                }
                              } else {
                                var result31 = null;
                                pos = savedPos8;
                              }
                            } else {
                              var result31 = null;
                              pos = savedPos8;
                            }
                          } else {
                            var result31 = null;
                            pos = savedPos8;
                          }
                        } else {
                          var result31 = null;
                          pos = savedPos8;
                        }
                      } else {
                        var result31 = null;
                        pos = savedPos8;
                      }
                    } else {
                      var result31 = null;
                      pos = savedPos8;
                    }
                  } else {
                    var result31 = null;
                    pos = savedPos8;
                  }
                } else {
                  var result31 = null;
                  pos = savedPos8;
                }
              } else {
                var result31 = null;
                pos = savedPos8;
              }
            } else {
              var result31 = null;
              pos = savedPos8;
            }
          } else {
            var result31 = null;
            pos = savedPos8;
          }
        } else {
          var result31 = null;
          pos = savedPos8;
        }
        var result32 = result31 !== null
          ? (function(name, params, code) {
                return {
                  name: name,
                  params: params,
                  src: code,
                  action: "macro"
                };
              })(result31[3], result31[7], result31[15])
          : null;
        if (result32 !== null) {
          var result30 = result32;
        } else {
          var result30 = null;
          pos = savedPos7;
        }
        if (result30 !== null) {
          var result0 = result30;
        } else {
          var savedPos5 = pos;
          var savedPos6 = pos;
          var result22 = parse_ws();
          if (result22 !== null) {
            var result23 = parse_label();
            if (result23 !== null) {
              var result24 = parse_ws();
              if (result24 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result25 = "(";
                  pos += 1;
                } else {
                  var result25 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result25 !== null) {
                  var result26 = parse_ws();
                  if (result26 !== null) {
                    var result27 = parse_paramlist();
                    if (result27 !== null) {
                      var result28 = parse_ws();
                      if (result28 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result29 = ")";
                          pos += 1;
                        } else {
                          var result29 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result29 !== null) {
                          var result20 = [result22, result23, result24, result25, result26, result27, result28, result29];
                        } else {
                          var result20 = null;
                          pos = savedPos6;
                        }
                      } else {
                        var result20 = null;
                        pos = savedPos6;
                      }
                    } else {
                      var result20 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result20 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result20 = null;
                  pos = savedPos6;
                }
              } else {
                var result20 = null;
                pos = savedPos6;
              }
            } else {
              var result20 = null;
              pos = savedPos6;
            }
          } else {
            var result20 = null;
            pos = savedPos6;
          }
          var result21 = result20 !== null
            ? (function(name, params) {
                  return {
                    line: line,
                    name: name,
                    params: params,
                    action: "macrocall"
                  };
                })(result20[1], result20[5])
            : null;
          if (result21 !== null) {
            var result19 = result21;
          } else {
            var result19 = null;
            pos = savedPos5;
          }
          if (result19 !== null) {
            var result0 = result19;
          } else {
            var savedPos3 = pos;
            var savedPos4 = pos;
            var result13 = parse_ws();
            if (result13 !== null) {
              var result18 = parse_labeldef();
              var result14 = result18 !== null ? result18 : '';
              if (result14 !== null) {
                var result15 = parse_ws();
                if (result15 !== null) {
                  var result16 = parse_cmd();
                  if (result16 !== null) {
                    var result17 = parse_ws();
                    if (result17 !== null) {
                      var result11 = [result13, result14, result15, result16, result17];
                    } else {
                      var result11 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result11 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result11 = null;
                  pos = savedPos4;
                }
              } else {
                var result11 = null;
                pos = savedPos4;
              }
            } else {
              var result11 = null;
              pos = savedPos4;
            }
            var result12 = result11 !== null
              ? (function(label, cmd) {
                    tmp = {
                      line: line,
                      cmd: cmd,
                      action: "op"
                    };
                    if (label.length > 0) {
                      tmp.label = label;
                    }
                    return tmp;
                  })(result11[1], result11[3])
              : null;
            if (result12 !== null) {
              var result10 = result12;
            } else {
              var result10 = null;
              pos = savedPos3;
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              var savedPos1 = pos;
              var savedPos2 = pos;
              var result7 = parse_ws();
              if (result7 !== null) {
                var result8 = parse_labeldef();
                if (result8 !== null) {
                  var result9 = parse_ws();
                  if (result9 !== null) {
                    var result5 = [result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
              var result6 = result5 !== null
                ? (function(label) {
                      return {
                        line: line,
                        label: label,
                        action: "op"
                      };
                    })(result5[1])
                : null;
              if (result6 !== null) {
                var result4 = result6;
              } else {
                var result4 = null;
                pos = savedPos1;
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var savedPos0 = pos;
                var result2 = parse_comment();
                var result3 = result2 !== null
                  ? (function() {
                        return {
                          action: "nop"
                        };
                      })()
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_cmd() {
        var cacheKey = 'cmd@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ws();
        if (result3 !== null) {
          var result4 = parse_op();
          if (result4 !== null) {
            var result5 = parse_ws();
            if (result5 !== null) {
              var result6 = parse_paramlist();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op, plist) {
                return {
                  op: op,
                  params: plist
                };
              })(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op() {
        var cacheKey = 'op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z]");
            }
          }
          if (result4 !== null) {
            if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z]");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(op) { return op.join('').toUpperCase(); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("operator");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_paramlist() {
        var cacheKey = 'paramlist@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result18 = parse_labeldef();
        var result11 = result18 !== null ? result18 : '';
        if (result11 !== null) {
          var result12 = parse_ws();
          if (result12 !== null) {
            var result13 = parse_param();
            if (result13 !== null) {
              var result14 = parse_ws();
              if (result14 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result15 = ",";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result15 !== null) {
                  var result16 = parse_ws();
                  if (result16 !== null) {
                    var result17 = parse_paramlist();
                    if (result17 !== null) {
                      var result9 = [result11, result12, result13, result14, result15, result16, result17];
                    } else {
                      var result9 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
          } else {
            var result9 = null;
            pos = savedPos3;
          }
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        var result10 = result9 !== null
          ? (function(label, v, l) {
                if (label.length > 0) {
                  v.label = label;
                }
                return [v].concat(l);
              })(result9[0], result9[2], result9[6])
          : null;
        if (result10 !== null) {
          var result8 = result10;
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result7 = parse_labeldef();
          var result4 = result7 !== null ? result7 : '';
          if (result4 !== null) {
            var result5 = parse_ws();
            if (result5 !== null) {
              var result6 = parse_param();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(label, v) {
                  if (label.length > 0) {
                    v.label = label;
                  }
                  return [v];
                })(result2[0], result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_param() {
        var cacheKey = 'param@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "[") {
          var result7 = "[";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result7 !== null) {
          var result8 = parse_additive();
          if (result8 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result9 = "]";
              pos += 1;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result9 !== null) {
              var result5 = [result7, result8, result9];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        var result6 = result5 !== null
          ? (function(v) {
                v.hasBrackets = true;
                return v;
              })(result5[1])
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_additive();
          var result3 = result2 !== null
            ? (function(v) {
                  return v;
                })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("parameter");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive() {
        var cacheKey = 'additive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_multiplicative();
        if (result5 !== null) {
          var result6 = parse_ws();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result7 = "+";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_ws();
              if (result8 !== null) {
                var result9 = parse_additive();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, right) {
                return {
                  isExpression: true,
                  op: 'add',
                  children: [left, right]
                };
              })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_multiplicative();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative() {
        var cacheKey = 'multiplicative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_value();
        if (result5 !== null) {
          var result6 = parse_ws();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result7 = "*";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"*\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_ws();
              if (result8 !== null) {
                var result9 = parse_multiplicative();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, right) {
                return {
                  isExpression: true,
                  op: 'mul',
                  children: [left, right]
                };
              })(result3[0], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_value();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_value() {
        var cacheKey = 'value@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var result19 = parse_number();
        var result20 = result19 !== null
          ? (function(v) {
                return {
                  value: v,
                  isNumber: true
                };
              })(result19)
          : null;
        if (result20 !== null) {
          var result18 = result20;
        } else {
          var result18 = null;
          pos = savedPos5;
        }
        if (result18 !== null) {
          var result0 = result18;
        } else {
          var savedPos4 = pos;
          var result16 = parse_label();
          var result17 = result16 !== null
            ? (function(v) {
                  return {
                    value: v,
                    isString: true
                  };
                })(result16)
            : null;
          if (result17 !== null) {
            var result15 = result17;
          } else {
            var result15 = null;
            pos = savedPos4;
          }
          if (result15 !== null) {
            var result0 = result15;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            if (input.substr(pos, 1) === "\"") {
              var result12 = "\"";
              pos += 1;
            } else {
              var result12 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result12 !== null) {
              var result13 = parse_strliteral();
              if (result13 !== null) {
                if (input.substr(pos, 1) === "\"") {
                  var result14 = "\"";
                  pos += 1;
                } else {
                  var result14 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\\"\"");
                  }
                }
                if (result14 !== null) {
                  var result10 = [result12, result13, result14];
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
            var result11 = result10 !== null
              ? (function(v) {
                    return {
                      value: v,
                      isStringLiteral: true
                    };
                  })(result10[1])
              : null;
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;
              pos = savedPos2;
            }
            if (result9 !== null) {
              var result0 = result9;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              if (input.substr(pos, 1) === "(") {
                var result4 = "(";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result4 !== null) {
                var result5 = parse_ws();
                if (result5 !== null) {
                  var result6 = parse_additive();
                  if (result6 !== null) {
                    var result7 = parse_ws();
                    if (result7 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result8 = ")";
                        pos += 1;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result8 !== null) {
                        var result2 = [result4, result5, result6, result7, result8];
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(v) { return v; })(result2[2])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number() {
        var cacheKey = 'number@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos3 = pos;
        var savedPos4 = pos;
        if (input.substr(pos, 1) === "0") {
          var result14 = "0";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"0\"");
          }
        }
        if (result14 !== null) {
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result16 = input.charAt(pos);
            pos++;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result16 !== null) {
            var result15 = [];
            while (result16 !== null) {
              result15.push(result16);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result16 = input.charAt(pos);
                pos++;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result15 = null;
          }
          if (result15 !== null) {
            var result12 = [result14, result15];
          } else {
            var result12 = null;
            pos = savedPos4;
          }
        } else {
          var result12 = null;
          pos = savedPos4;
        }
        var result13 = result12 !== null
          ? (function(v) { return parseInt(v[0] + v[1].join(''), 8); })(result12)
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos3;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          var savedPos2 = pos;
          if (input.substr(pos, 2) === "0x") {
            var result8 = "0x";
            pos += 2;
          } else {
            var result8 = null;
            if (reportMatchFailures) {
              matchFailed("\"0x\"");
            }
          }
          if (result8 !== null) {
            if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
              var result10 = input.charAt(pos);
              pos++;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9a-fA-F]");
              }
            }
            if (result10 !== null) {
              var result9 = [];
              while (result10 !== null) {
                result9.push(result10);
                if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9a-fA-F]");
                  }
                }
              }
            } else {
              var result9 = null;
            }
            if (result9 !== null) {
              var result6 = [result8, result9];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          var result7 = result6 !== null
            ? (function(v) { return parseInt(v[0] + v[1].join(''), 16); })(result6)
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos1;
          }
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result4 !== null) {
              var result2 = [];
              while (result4 !== null) {
                result2.push(result4);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result4 = input.charAt(pos);
                  pos++;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result2 = null;
            }
            var result3 = result2 !== null
              ? (function(v) { return parseInt(v.join(''), 10); })(result2)
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("number");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_strliteral() {
        var cacheKey = 'strliteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = [];
        var result3 = parse_allbutquotes();
        while (result3 !== null) {
          result1.push(result3);
          var result3 = parse_allbutquotes();
        }
        var result2 = result1 !== null
          ? (function(v) { return v.join(''); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("stringliteral");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_labeldef() {
        var cacheKey = 'labeldef@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === ":") {
          var result3 = ":";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\":\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_label();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(l) { return l; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = 'label@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z0-9_.]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_.]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[a-zA-Z0-9_.]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_.]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(label) {
                return label.join('');
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("label");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_allbutquotes() {
        var cacheKey = 'allbutquotes@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "\\\"") {
          var result5 = "\\\"";
          pos += 2;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\\\"\"");
          }
        }
        var result6 = result5 !== null
          ? (function(v) { return "\""; })(result5)
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result2 = input.charAt(pos);
            pos++;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          var result3 = result2 !== null
            ? (function(v) { return v; })(result2)
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ";") {
          var result1 = ";";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          if (input.substr(pos).match(/^[^\n\r]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\n\\r]");
            }
          }
          while (result3 !== null) {
            result2.push(result3);
            if (input.substr(pos).match(/^[^\n\r]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[^\\n\\r]");
              }
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ws() {
        var cacheKey = 'ws@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        if (input.substr(pos, 1) === " ") {
          var result1 = " ";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\" \"");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos, 1) === " ") {
            var result1 = " ";
            pos += 1;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\" \"");
            }
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nl() {
        var cacheKey = 'nl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos4 = pos;
        var savedPos5 = pos;
        if (input.substr(pos, 1) === "\n") {
          var result14 = "\n";
          pos += 1;
        } else {
          var result14 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result14 !== null) {
          var result15 = parse_ws();
          if (result15 !== null) {
            var result12 = [result14, result15];
          } else {
            var result12 = null;
            pos = savedPos5;
          }
        } else {
          var result12 = null;
          pos = savedPos5;
        }
        var result13 = result12 !== null
          ? (function() { line++; })()
          : null;
        if (result13 !== null) {
          var result11 = result13;
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 2) === "\r\n") {
            var result9 = "\r\n";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result9 !== null) {
            var result10 = parse_ws();
            if (result10 !== null) {
              var result7 = [result9, result10];
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          var result8 = result7 !== null
            ? (function() { line++; })()
            : null;
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "\r") {
              var result4 = "\r";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse_ws();
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function() { line++; })()
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("newline");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
    var line = 1;
      
    var tmp;
      
  
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
