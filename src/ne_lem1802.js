
var DCPU16 = DCPU16 || {};

(function () {

	var _ = {
		font: [0x000F,0x0808,0x080F,0x0808,0x08F8,0x0808,0x00FF,0x0808,0x0808,0x0808,0x08FF,0x0808,0x00FF,0x1414,0xFF00,0xFF08,
			0x1F10,0x1714,0xFC04,0xF414,0x1710,0x1714,0xF404,0xF414,0xFF00,0xF714,0x1414,0x1414,0xF700,0xF714,0x1417,0x1414,
			0x0F08,0x0F08,0x14F4,0x1414,0xF808,0xF808,0x0F08,0x0F08,0x001F,0x1414,0x00FC,0x1414,0xF808,0xF808,0xFF08,0xFF08,
			0x14FF,0x1414,0x080F,0x0000,0x00F8,0x0808,0xFFFF,0xFFFF,0xF0F0,0xF0F0,0xFFFF,0x0000,0x0000,0xFFFF,0x0F0F,0x0F0F,
			0x0000,0x0000,0x005F,0x0000,0x0300,0x0300,0x3E14,0x3E00,0x266B,0x3200,0x611C,0x4300,0x3629,0x7650,0x0002,0x0100,
			0x1C22,0x4100,0x4122,0x1C00,0x2A1C,0x2A00,0x083E,0x0800,0x4020,0x0000,0x0808,0x0800,0x0040,0x0000,0x601C,0x0300,
			0x3E41,0x3E00,0x427F,0x4000,0x6259,0x4600,0x2249,0x3600,0x0F08,0x7F00,0x2745,0x3900,0x3E49,0x3200,0x6119,0x0700,
			0x3649,0x3600,0x2649,0x3E00,0x0024,0x0000,0x4024,0x0000,0x0814,0x2241,0x1414,0x1400,0x4122,0x1408,0x0259,0x0600,
			0x3E59,0x5E00,0x7E09,0x7E00,0x7F49,0x3600,0x3E41,0x2200,0x7F41,0x3E00,0x7F49,0x4100,0x7F09,0x0100,0x3E49,0x3A00,
			0x7F08,0x7F00,0x417F,0x4100,0x2040,0x3F00,0x7F0C,0x7300,0x7F40,0x4000,0x7F06,0x7F00,0x7F01,0x7E00,0x3E41,0x3E00,
			0x7F09,0x0600,0x3E41,0xBE00,0x7F09,0x7600,0x2649,0x3200,0x017F,0x0100,0x7F40,0x7F00,0x1F60,0x1F00,0x7F30,0x7F00,
			0x7708,0x7700,0x0778,0x0700,0x7149,0x4700,0x007F,0x4100,0x031C,0x6000,0x0041,0x7F00,0x0201,0x0200,0x8080,0x8000,
			0x0001,0x0200,0x2454,0x7800,0x7F44,0x3800,0x3844,0x2800,0x3844,0x7F00,0x3854,0x5800,0x087E,0x0900,0x4854,0x3C00,
			0x7F04,0x7800,0x447D,0x4000,0x2040,0x3D00,0x7F10,0x6C00,0x417F,0x4000,0x7C18,0x7C00,0x7C04,0x7800,0x3844,0x3800,
			0x7C14,0x0800,0x0814,0x7C00,0x7C04,0x0800,0x4854,0x2400,0x043E,0x4400,0x3C40,0x7C00,0x1C60,0x1C00,0x7C30,0x7C00,
			0x6C10,0x6C00,0x4C50,0x3C00,0x6454,0x4C00,0x0836,0x4100,0x0077,0x0000,0x4136,0x0800,0x0201,0x0201,0x704C,0x7000],
		
		color: function (bits) {
			var cb = 160;
			
			bits = bits & 0xf;
			
			if (bits & 0x8) {
				cb = 255;
			}
			
			return {
				r: bits & 0x4 ? cb : 0,
				g: bits & 0x2 ? cb : 0,
				b: bits & 0x1 ? cb : 0
			};
		}
	};

	DCPU16.NE_LEM1802 = function (dcpu) {
		this.description = 'NYA Elektriska LEM1802';
		this.id = 0x7349f615;
		this.version = 0x1802;
		this.manufacturer = 0x1c6c8b36;
		
		this.width = 128;
		this.height = 96;
		
		this.vram = 0x8000;
		this.font = 0;
		
		this.int = function () {
			var b = this.dcpu.ram.B;
			
			switch (this.dcpu.ram.A) {
			case 0: // MEM_MAP_SCREEN
				this.vram = b;
				break;
			case 1: // MEM_MAP_FONT
				this.font = b;
				break;
			case 2: // MEM_MAP_PALETTE
				// TODO
				break;
			case 3: // SET_BORDER_COLOR
				// TODO
				break;
			}
		};
		
		this.drawCharacter = function (char, fg, bg, x, y, buf) {
			var i, j, line, index, color;

			for (i = 0; i < 4; i++) {
				index = ((x << 10) + (y << 2) + i) << 2;
				line = (char >>> ((3 - i) << 3)) & 0xff;
				
				for (j = 0; j < 8; j++) {
					color = bg;
					if (line & (1 << j)) {
						color = fg;
					}

					buf.data[index] = color.r;
					buf.data[index + 1] = color.g;
					buf.data[index + 2] = color.b;
					buf.data[index + 3] = 255;
					index += this.width << 2;
				}
			}
			
			return buf;
		};
		
		this.drawScreen = function (canvas) {
			if (!this.vram) {
				return;
			}

			var buf = canvas.createImageData(this.width, this.height),
				i, val, char, fg, bg, x, y;
				
			for (i = 0; i < 0x180; i++ ) {
				x = Math.floor(i / 32);
				y = i % 32;
				
				val = this.dcpu.getWord(this.vram + i);
				
				if (this.font) {
					char = (this.dcpu.getWord(this.font + ((val & 0x7f) << 1)) << 16) | (this.dcpu.getWord(this.font + ((val & 0x7f) << 1) + 1));
				} else {
					char = (_.font[((val & 0x7f) << 1)] << 16) | (_.font[((val & 0x7f) << 1) + 1]);
				}
				
				bg = _.color(val >>> 8);
				fg = _.color(val >>> 12);
				
				buf = this.drawCharacter(char, fg, bg, x, y, buf);
			}

			canvas.putImageData(buf, 0, 0);
		};

		this.dcpu = dcpu;
		this.dcpu.add(this);
	};

})();
