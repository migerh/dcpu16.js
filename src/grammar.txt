/*

  This file is part of dcpu16.js
  
  Copyright 2012 Michael Gerhaeuser
  
  https://github.com/migerh/dcpu16.js
  
  dcpu16.js is free software; You can redistribute it and/or
  modify it under the terms of the MIT license. You should have
  received a copy of the MIT license along with dcpu16.js. If not,
  see http://www.opensource.org/licenses/MIT

 */
 


/*
 * DCPU16 ASM Parser
 */

{
  var line = 1;
  var tmp;
  var i;

  var regTable = {'A': 1, 'B': 1, 'C': 1, 'X': 1, 'Y': 1, 'Z': 1,
                  'I': 1, 'J': 1, 'SP': 1, 'PC': 1, 'EX': 1, 'IA': 1,
                  'POP': 1, 'PUSH': 1, 'PEEK': 1, 'PICK': 1};

  var isArray = function (val) {
    return typeof val === "object" && 'splice' in val && 'join' in val;
  };

  var node = function (type, value, children) {
    var node = {
          type: type,
          value: value,
          line: line,
          children: []
        }, i;

    for (i = 2; i < arguments.length; i++) {
      node.children.push(arguments[i]);
    }

    return node;
  };

  var expressionNode = function (left, right) {
    var tmp, i;

    if (right.length === 0) {
      return left;
    }

    tmp = node("node_expression", right[0][0], left, right[0][2]);

    for (i = 1; i < right.length; i++) {
      tmp = node("node_expression", right[i][0], tmp, right[i][2]);
    }

    return tmp;
  }
}

start
  = program:statements
    {
      return program;
    }


statements
  = nl* stmt:stmt statements:statements
    { return isArray(stmt) ? stmt.concat(statements) : [stmt].concat(statements); }

  / stmt:stmt
    { return isArray(stmt) ? stmt : [stmt]; }

  / nl*
    { return []; }


stmt
  = ws ("." / "#") "macro"? ws name:label ws "(" ws params:paramlist ws ")" ws nl? "{" ws nl? code:statements ws "}" ws
    { return node("node_directive", "macro", params, code);
    }

  / ws name:label ws "(" ws params:paramlist ws ")"
    { return node("node_directive", "dir_callmacro", params); }
  / ws d:directive ws params:wsparamlist ws
    { return node("node_directive", d, params); }

  / ws label:labeldef? ws cmd:cmd ws
    {
      tmp = cmd;

      if (label.length > 0) {
        tmp = [node("node_label", label), tmp];
      }

      return tmp;
    }

  / ws label:labeldef ws
    { return node("node_label", label); }

  / ws comment
    { return node("node_nop", "nop"); }


cmd
  = ws "DAT"i ws plist:paramlist
    { return node("node_directive", "DAT", plist); }
  / ws op:op ws plist:paramlist?
    { return node("node_op", op.toUpperCase(), plist); }

paramlist
  = /* no value labels for now label:labeldef?*/ ws v:param ws "," ws l:paramlist
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v].concat(l);
    }
  / /* no value labels for now label:labeldef?*/ ws v:param
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v];
    }

wsparamlist
  = /* no value labels for now label:labeldef?*/ ws v:param ws ","? ws l:paramlist
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v].concat(l);
    }
  / /* no value labels for now label:labeldef?*/ ws v:param
    {
      /*if (label.length > 0) {
        v.label = label;
      }*/
      return [v];
    }

param "parameter"
  = "[" ws m:"--"? ws "SP"i ws p:"++"? ws "]"
    {
      tmp = "PEEK";
      if (m === '--' && p === '') {
        tmp = "PUSH";
      } else if (m === '' && p === '++') {
        tmp = "POP";
      }

      return node("node_value", "val_deref", node("val_register", tmp));
    }
  / "[" v:bit "]"
    { return node("node_value", "val_deref", v); }
  / v:bit
    {
      return node("node_value", "val_literal", v);
    }
comp
  = left:bool ws op:("<=" / "<" / "==" / ">=" / ">") ws right:bool
    { return node("node_comparison", op, left, right); }

bool
  = left:bit ws right:(("&&" / "||") ws bit ws)*
    { return expressionNode(left, right); }

bit
  = left:shift ws right:(("&" / "|" / "^") ws shift ws)*
    { return expressionNode(left, right); }

shift
  = left:additive ws right:(("<<" / ">>") ws additive ws)*
    { return expressionNode(left, right); }

additive
  = left:multiplicative ws right:(("+" / "-") ws multiplicative ws)*
    { return expressionNode(left, right); }

multiplicative
  = left:value ws right:(("*" / "/" / "%") ws value ws)*
    { return expressionNode(left, right); }

value
  = v:number
    { return node("val_number", v); }
/*  / v:register
    { return node("val_register", v); }*/
  / v:label
    {
      if (regTable[v.toUpperCase()]) {
        return node("val_register", v.toUpperCase());
      } else {
        return node("val_identifier", v);
      }
    }
  / "\"" v:strliteral "\""
    { return node("val_string", v); }
  / "(" ws v:bit ws ")"
    { return v; }


number "number"
  /* oct */
  = v:("0"[0-9]+)
    { return parseInt(v[0] + v[1].join(''), 8); }
  /* hex */
  / v:("0x"[0-9a-fA-F]+)
    { return parseInt(v[0] + v[1].join(''), 16); }
  /* dec */
  / v:[0-9]+
    { return parseInt(v.join(''), 10); }

strliteral "stringliteral"
  = v:allbutquotes*
    { return v.join(''); }

labeldef
  = ":" l:label
    { return l; }
  / l:label ":"
    { return l; }

label "label"
  = label:([a-zA-Z0-9_\.]+)
    { return label.join(''); }

register "register"
  = reg:("SP"i/"PC"i/"EX"i/"IA"i/"PUSH"i/"POP"i/[A-CX-ZIJ]i)
    { return isArray(reg) ? reg.join('').toUpperCase() : reg.toUpperCase(); }

op "operator"
  = op:([A-Z]i[A-Z]i[A-Z]i)
    { return op.join('').toUpperCase(); }

directive "directive"
  = ("." / "#") l:label
    { return l; }

allbutquotes
  = v:"\\\""
    { return "\""; }
  / v:[^\"]
    { return v; }

comment
  = ";" [^\n\r]*

ws "whitespace"
  = (" " / "\t")*

nl "newline"
  = "\n" ws { line++; }
  / "\r\n" ws { line++; }
  / "\r" ws { line++; }

